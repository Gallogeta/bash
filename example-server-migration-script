#!/bin/bash

# Configuration
OLD_SERVER="old_server_user@old_server_ip"  # SSH connection string for old server
NEW_SERVER="new_server_user@new_server_ip"  # SSH connection string for new server
USERS=("user1" "user2" "user3" "user4" "user5") # Array of usernames
BACKUP_DIR="/backup_users" # Backup directory on the old server
PASSWORD="new_user_password" # Default password for new users (CHANGE THIS!)

# --- Functions ---

log_message() {
  timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  echo "[$timestamp] $1"
}

backup_user() {
  user=$1
  log_message "Backing up $user..."
  ssh $OLD_SERVER "sudo mkdir -p $BACKUP_DIR" # Create backup directory if not exist
  ssh $OLD_SERVER "sudo tar -czvf $BACKUP_DIR/$user.tar.gz /home/$user"
  if [[ $? -ne 0 ]]; then
    log_message "ERROR: Backup of $user failed!"
    exit 1
  fi
}

restore_user_data() {
  user=$1
  log_message "Restoring data for $user..."
  rsync -avz $OLD_SERVER:$BACKUP_DIR/$user.tar.gz $NEW_SERVER:/tmp/
  ssh $NEW_SERVER "sudo tar -xzf /tmp/$user.tar.gz -C /home" # Extract in correct location
  ssh $NEW_SERVER "sudo rm /tmp/$user.tar.gz" # remove the tar file
  if [[ $? -ne 0 ]]; then
    log_message "ERROR: Restoring data for $user failed!"
    exit 1
  fi
}


create_user_account() {
  user=$1
  log_message "Creating account for $user..."

  # Create user, matching UID/GID if possible (needs more advanced handling if not matching)
  ssh $NEW_SERVER "sudo useradd -m $user" # -m creates home directory

  # Set password (use a more secure method in production!)
  ssh $NEW_SERVER "sudo chpasswd <<< $user:$PASSWORD"

  if [[ $? -ne 0 ]]; then
    log_message "ERROR: Creating account for $user failed!"
    exit 1
  fi
}

set_ownership() {
    user=$1
    log_message "Setting ownership for $user..."
    ssh $NEW_SERVER "sudo chown -R $user:$user /home/$user"
    if [[ $? -ne 0 ]]; then
        log_message "ERROR: Setting ownership for $user failed!"
        exit 1
    fi

}

# --- Main Script ---

log_message "Starting user migration..."

# Backup all users
for user in "${USERS[@]}"; do
    backup_user $user
done

# Create user accounts and restore data
for user in "${USERS[@]}"; do
  create_user_account $user
  restore_user_data $user
  set_ownership $user
done

log_message "User migration complete."


# ssh $OLD_SERVER "sudo rm -rf $BACKUP_DIR" # Remove backups after successful migration and verification.
